import { Idl } from "@project-serum/anchor";
import { PublicKey, Connection, ConnectionConfig } from "@solana/web3.js";
import { ParsedIdlInstruction, SolanaParser } from "@debridge-finance/solana-transaction-parser";
import { IDL as JupiterIdl, Jupiter } from "./idl/jupiter"; // idl and types file generated by Anchor

const idl = JupiterIdl as Idl;


const config: ConnectionConfig = {
	/** Optional commitment level */
	commitment: 'confirmed',
	/** Optional Disable retring calls when server responds with HTTP 429 (Too Many Requests) */
	disableRetryOnRateLimit: false,
	/** time to allow for the server to initially process a transaction (in milliseconds) */
	confirmTransactionInitialTimeout: 150000
};


const rpcConnection = new Connection('https://api.mainnet-beta.solana.com', config);
// @ts-ignore
const txParser = new SolanaParser([{ idl: JupiterIdl as Idl, programId: "JUP2jxvXaqu7NQY1GmNF4m1vodw12LVXYxbFL2uJvfo" }]);

const parseTx = async () => {
    const parsed = await txParser.parseTransaction(
        rpcConnection,
        "5zgvxQjV6BisU8SfahqasBZGfXy5HJ3YxYseMBG7VbR4iypDdtdymvE1jmEMG7G39bdVBaHhLYUHUejSTtuZEpEj",
        false,
    );
    console.log('parsed');
    console.log(parsed);
    // we can find instruction by name
    const tokenSwapIx = parsed?.find((pix) => pix.name === "tokenSwap");
    // or just use index
    if (parsed?.length) {
        const setTokenLedgerIx = parsed[0] as ParsedIdlInstruction<Jupiter, "setTokenLedger">;  
    }
}

parseTx();